code examples,prefix,middle,suffix,completion
"def shoot(self):
    if self.cool_down_counter == 0:
        laser = Laser(self.x, self.y, self.laser_img)
        self.lasers.append(laser)
        self.cool_down_counter = 1","def shoot(self):
    if self.cool_down_counter == 0:","        laser = Laser(self.x, self.y, self.laser_img)","        self.lasers.append(laser)
        self.cool_down_counter = 1","def shoot(self):
    if self.cool_down_counter == 0:
        self.cool_down_counter = 1
        self.cool_down_timer = 0
        self.cool_down_timer_timer = 0
        self.cool_down_timer_timer_counter = 0"
"def chat():
    print(""Start talking with the bot: (Press q to quit)"")
    while True:
        inp = input(""You: "")
        if inp.lower() == ""q"":
            break       
        result = model.predict([bag_of_words(inp, words)])[0]
        result_index = numpy.argmax(result)
        tag = labels[result_index]
        if result[result_index] > 0.1:
            for tg in data[""intents""]:
                if tg[""tag""] == tag:
                    responses = tg[""responses""]
            print(random.choice(responses))
        else: 
            print(""I did not understand that!"")","def chat():
    print(""Start talking with the bot: (Press q to quit)"")
    while True:
        inp = input(""You: "")
        if inp.lower() == ""q"":
            break       
        result = model.predict([bag_of_words(inp, words)])[0]
        result_index = numpy.argmax(result)
        tag = labels[result_index]
        if result[result_index] > 0.1:
            for tg in data[""intents""]:
                if tg[""tag""] == tag:","                    responses = tg[""responses""]","            print(random.choice(responses))
        else: 
            print(""I did not understand that!"")","def chat():
    print(""Start talking with the bot: (Press q to quit)"")
    while True:
        inp = input(""You: "")
        if inp.lower() == ""q"":
            break       
        result = model.predict([bag_of_words(inp, words)])[0]
        result_index = numpy.argmax(result)
        tag = labels[result_index]
        if result[result_index] > 0.1:
            for tg in data[""intents""]:
                if tg[""tag""] == tag:
                    tg[""confidence""] = 1.0
                    tg[""confidence_index""] = result_index
                    tg[""confidence_index_index""] = result_index
                    tg[""confidence_index_index_index""] = result_index
                   "
"def clicker():
    while True:
        if clicking:
            mouse.click(Button.left, 1)
        time.sleep(0.00001)",def clicker():,    while True:,"        if clicking:
            mouse.click(Button.left, 1)
        time.sleep(0.00001)","def clicker():
    """"""
    Clicker class.
    """"""
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.clicker = clicker_factory.get_clicker()

    def"
"class ApartmentItem(scrapy.Item):
    title = scrapy.Field()
    price = scrapy.Field()
    square_price = scrapy.Field()
    area = scrapy.Field()
    rooms = scrapy.Field()
    floor = scrapy.Field()
    city = scrapy.Field()
    location = scrapy.Field()
    source = scrapy.Field()","class ApartmentItem(scrapy.Item):
    title = scrapy.Field()
    price = scrapy.Field()
    square_price = scrapy.Field()
    area = scrapy.Field()
    rooms = scrapy.Field()",    floor = scrapy.Field(),"    city = scrapy.Field()
    location = scrapy.Field()
    source = scrapy.Field()","class ApartmentItem(scrapy.Item):
    title = scrapy.Field()
    price = scrapy.Field()
    square_price = scrapy.Field()
    area = scrapy.Field()
    rooms = scrapy.Field()
    bedrooms = scrapy.Field()
    beds = scrapy.Field()
    beds_per_room = scrapy.Field()
    beds_per_bed = scrapy.Field()
    beds_per_"
"@router.post(""/"", status_code=status.HTTP_201_CREATED, response_model=schemas.UserOut)
def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):
    hashed_password = utils.hash(user.password)
    user.password = hashed_password
    new_user = models.User(**user.model_dump())
    db.add(new_user)
    db.commit()
    db.refresh(new_user)
    return new_user","@router.post(""/"", status_code=status.HTTP_201_CREATED, response_model=schemas.UserOut)
def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):
    hashed_password = utils.hash(user.password)
    user.password = hashed_password
    new_user = models.User(**user.model_dump())",    db.add(new_user),"    db.commit()
    db.refresh(new_user)
    return new_user","@router.post(""/"", status_code=status.HTTP_201_CREATED, response_model=schemas.UserOut)
def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):
    hashed_password = utils.hash(user.password)
    user.password = hashed_password
    new_user = models.User(**user.model_dump())
    db.add(new_user)
    db.commit()
    return new_user


@router.get(""/{user_id}"", response_model=schemas.UserOut)
def get_user(user_id:"
"class Settings(BaseSettings):
    database_hostname: str
    database_port: str
    database_password: str
    database_name: str
    database_username: str
    secret_key: str
    algorithm: str
    access_token_expire_minutes: int

    class Config:
        env_file = "".env""","class Settings(BaseSettings):
    database_hostname: str
    database_port: str
    database_password: str
    database_name: str
    database_username: str",    secret_key: str,"    algorithm: str
    access_token_expire_minutes: int

    class Config:
        env_file = "".env""","class Settings(BaseSettings):
    database_hostname: str
    database_port: str
    database_password: str
    database_name: str
    database_username: str
    database_password_hash: str
    database_name_hash: str
    database_host: str
    database_port_hash: str
    database_user: str
    database_password_hash_hash: str
    database_name"
"def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()","def get_db():
    db = SessionLocal()
    try:
        yield db",    finally:,        db.close(),"def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


def get_db_session(db_url):
    db = get_db()
    try:
        yield db
    finally:
        db.close()


def get_db_session"
"class Follow(Base):
    __tablename__ = ""followers""
    user_id = Column(
        Integer, ForeignKey(""users.id"", ondelete=""CASCADE""), primary_key=True
    )
    follow_user_id = Column(
        Integer, ForeignKey(""users.id"", ondelete=""CASCADE""), primary_key=True","class Follow(Base):
    __tablename__ = ""followers""
    user_id = Column(","        Integer, ForeignKey(""users.id"", ondelete=""CASCADE""), primary_key=True","    )
    follow_user_id = Column(
        Integer, ForeignKey(""users.id"", ondelete=""CASCADE""), primary_key=True","class Follow(Base):
    __tablename__ = ""followers""
    user_id = Column(Integer, ForeignKey(""users.id""), primary_key=True)
    follower_id = Column(Integer, ForeignKey(""users.id""), primary_key=True)
    follower = relationship(""User"", back_populates"
"class User(Base):
    __tablename__ = ""users""
    id = Column(Integer, primary_key=True, nullable=False)
    email = Column(String, nullable=False, unique=True)
    password = Column(String, nullable=False)
    created_at = Column(
        TIMESTAMP(timezone=True), nullable=False, server_default=text(""now()"")
    )
    followers = Column(Integer, nullable=False)
    following = Column(Integer, nullable=False)","class User(Base):
    __tablename__ = ""users""
    id = Column(Integer, primary_key=True, nullable=False)
    email = Column(String, nullable=False, unique=True)
    password = Column(String, nullable=False)
    created_at = Column(
        TIMESTAMP(timezone=True), nullable=False, server_default=text(""now()"")",    ),"    followers = Column(Integer, nullable=False)
    following = Column(Integer, nullable=False)","class User(Base):
    __tablename__ = ""users""
    id = Column(Integer, primary_key=True, nullable=False)
    email = Column(String, nullable=False, unique=True)
    password = Column(String, nullable=False)
    created_at = Column(
        TIMESTAMP(timezone=True), nullable=False, server_default=text(""now()"")
    )
    updated_at = Column(
        TIMESTAMP(timezone=True), nullable=False, server_default=text(""now()"")
    )

    def __init__(self, email, password):
        self.email = email
        self"
"def preprocess_face(face):
    face_resized = cv2.resize(face, (48, 48))
    face_normalized = face_resized / 255.0
    face_input = np.expand_dims(face_normalized, axis=(0, -1))
    return face_input","def preprocess_face(face):
    face_resized = cv2.resize(face, (48, 48))",    face_normalized = face_resized / 255.0,"    face_input = np.expand_dims(face_normalized, axis=(0, -1))
    return face_input","def preprocess_face(face):
    face_resized = cv2.resize(face, (48, 48))
    face_resized = face_resized.astype(np.float32) / 255.0
    face_resized = np.expand_dims(face_resized, axis=0)
    face_"
"def predict_facial_attributes(face_input):
    gender_pred, ethnicity_pred, age_pred = model.predict(face_input)
    gender = ""Male"" if gender_pred[0][0] < 0.5 else ""Female""
    ethnicity = {
        0: ""White"",
        1: ""Black"",
        2: ""Asiatic"",
        3: ""Indian"",
        4: ""Other""
    }.get(np.argmax(ethnicity_pred[0]), ""Unknown"")
    age = int(age_pred[0][0])
    return gender, ethnicity, age","def predict_facial_attributes(face_input):
    gender_pred, ethnicity_pred, age_pred = model.predict(face_input)","    gender = ""Male"" if gender_pred[0][0] < 0.5 else ""Female""","    ethnicity = {
        0: ""White"",
        1: ""Black"",
        2: ""Asiatic"",
        3: ""Indian"",
        4: ""Other""
    }.get(np.argmax(ethnicity_pred[0]), ""Unknown"")
    age = int(age_pred[0][0])
    return gender, ethnicity, age","def predict_facial_attributes(face_input):
    gender_pred, ethnicity_pred, age_pred = model.predict(face_input)
    return gender_pred, ethnicity_pred, age_pred


def predict_face(face_input):
    gender_pred, ethnicity_pred, age_pred = model.predict(face_input)
   "
"def predict_attributes(image_path):
    try:
        img, gray_img = load_and_preprocess_image(image_path)
        faces = detect_faces(gray_img)
        if len(faces) == 0:
            print(""No faces detected."")
            return
        for (x, y, w, h) in faces:
            face = gray_img[y : y + h, x : x + w]
            face_input = preprocess_face(face)
            gender, ethnicity, age = predict_facial_attributes(face_input)
            img = annotate_image(img, x, y, gender, ethnicity, age)
        cv2.imshow('Facial Attribute Recognition', cv2.resize(img, (512, 512)))
        cv2.waitKey(0)
        cv2.destroyAllWindows()
    
    except Exception as e:
        print(f""Error: {e}"")","def predict_attributes(image_path):
    try:
        img, gray_img = load_and_preprocess_image(image_path)
        faces = detect_faces(gray_img)
        if len(faces) == 0:
            print(""No faces detected."")
            return
        for (x, y, w, h) in faces:
            face = gray_img[y : y + h, x : x + w]
            face_input = preprocess_face(face)
            gender, ethnicity, age = predict_facial_attributes(face_input)","            img = annotate_image(img, x, y, gender, ethnicity, age)","        cv2.imshow('Facial Attribute Recognition', cv2.resize(img, (512, 512)))
        cv2.waitKey(0)
        cv2.destroyAllWindows()
    
    except Exception as e:
        print(f""Error: {e}"")","def predict_attributes(image_path):
    try:
        img, gray_img = load_and_preprocess_image(image_path)
        faces = detect_faces(gray_img)
        if len(faces) == 0:
            print(""No faces detected."")
            return
        for (x, y, w, h) in faces:
            face = gray_img[y : y + h, x : x + w]
            face_input = preprocess_face(face)
            gender, ethnicity, age = predict_facial_attributes(face_input)
            print(gender, ethnicity, age)
            if gender == ""Male"":
                gender = ""Male""
            elif gender == ""Female"":
                gender = ""Female""
            else:
                gender = ""Unknown""
            print(gender"
"def predict_attributes(image_path):
    img = cv2.imread(image_path)
    img = cv2.resize(img, (512, 512))
    if img is None:
        print(f""Error: Image at {image_path} could not be loaded."")
        return
    gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray_img, scaleFactor=1.3, minNeighbors=5)
    if len(faces) == 0:
        print(""No faces detected."")
        return
    for (x, y, w, h) in faces:
        face = gray_img[y : y + h, x : x + w]
        face_resized = cv2.resize(face, (48, 48))
        face_normalized = face_resized / 255.0
        face_input = np.expand_dims(face_normalized, axis=(0, -1))
        gender_pred, ethnicity_pred, age_pred = model.predict(face_input)
        gender = ""Male"" if gender_pred[0][0] < 0.5 else ""Female""
        match np.argmax(ethnicity_pred[0]):
            case 0:
                ethnicity = ""White""
            case 1:
                ethnicity = ""Black""
            case 2:
                ethnicity = ""Asiatic""
            case 3:
                ethnicity = ""Indian""
            case 4:
                ethnicity = ""Other""
        age = age_pred[0][0]
        
        cv2.putText(img, f""Gender: {gender}"", (x, y - 50), text_font, text_fontScale, text_color, text_thickness)
        cv2.putText(img, f""Ethnicity: {ethnicity}"", (x, y - 30), text_font, text_fontScale, text_color, text_thickness)
        cv2.putText(img, f""Age: {int(age)}"", (x, y - 10), text_font, text_fontScale, text_color, text_thickness)
    
    cv2.imshow('Facial Attribute Recognition', cv2.resize(img, (512, 512)))
    
    cv2.waitKey(0)
    cv2.destroyAllWindows()

predict_attributes(image_path)","def predict_attributes(image_path):
    img = cv2.imread(image_path)
    img = cv2.resize(img, (512, 512))
    if img is None:
        print(f""Error: Image at {image_path} could not be loaded."")
        return
    gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray_img, scaleFactor=1.3, minNeighbors=5)
    if len(faces) == 0:
        print(""No faces detected."")
        return
    for (x, y, w, h) in faces:
        face = gray_img[y : y + h, x : x + w]
        face_resized = cv2.resize(face, (48, 48))
        face_normalized = face_resized / 255.0
        face_input = np.expand_dims(face_normalized, axis=(0, -1))
        gender_pred, ethnicity_pred, age_pred = model.predict(face_input)
        gender = ""Male"" if gender_pred[0][0] < 0.5 else ""Female""
        match np.argmax(ethnicity_pred[0]):
            case 0:","                ethnicity = ""White""","            case 1:
                ethnicity = ""Black""
            case 2:
                ethnicity = ""Asiatic""
            case 3:
                ethnicity = ""Indian""
            case 4:
                ethnicity = ""Other""
        age = age_pred[0][0]
        
        cv2.putText(img, f""Gender: {gender}"", (x, y - 50), text_font, text_fontScale, text_color, text_thickness)
        cv2.putText(img, f""Ethnicity: {ethnicity}"", (x, y - 30), text_font, text_fontScale, text_color, text_thickness)
        cv2.putText(img, f""Age: {int(age)}"", (x, y - 10), text_font, text_fontScale, text_color, text_thickness)
    
    cv2.imshow('Facial Attribute Recognition', cv2.resize(img, (512, 512)))
    
    cv2.waitKey(0)
    cv2.destroyAllWindows()

predict_attributes(image_path)","def predict_attributes(image_path):
    img = cv2.imread(image_path)
    img = cv2.resize(img, (512, 512))
    if img is None:
        print(f""Error: Image at {image_path} could not be loaded."")
        return
    gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray_img, scaleFactor=1.3, minNeighbors=5)
    if len(faces) == 0:
        print(""No faces detected."")
        return
    for (x, y, w, h) in faces:
        face = gray_img[y : y + h, x : x + w]
        face_resized = cv2.resize(face, (48, 48))
        face_normalized = face_resized / 255.0
        face_input = np.expand_dims(face_normalized, axis=(0, -1))
        gender_pred, ethnicity_pred, age_pred = model.predict(face_input)
        gender = ""Male"" if gender_pred[0][0] < 0.5 else ""Female""
        match np.argmax(ethnicity_pred[0]):
            case 0:
                gender = ""Female""
            case 1:
                gender = ""Male""
            case 2:
                gender = ""Unknown""
        if gender == ""Unknown"":
            gender = ""Unknown""
        if gender == ""Male"":
            gender"
"def twoSum(nums, target):
    map = {}
    for i, num in enumerate(nums):
        diff = target - num
        if diff in map:
            return [map[diff], i]
        map[num] = i
    return None","def twoSum(nums, target):",    map = {},"    for i, num in enumerate(nums):
        diff = target - num
        if diff in map:
            return [map[diff], i]
        map[num] = i
    return None","def twoSum(nums, target):
    """"""
    :type nums: List[int]
    :type target: int
    :rtype: List[int]
    """"""
    if not nums:
        return []
    if target < 0:
        return []
    if target == "
"def divide(dividend, divisor):
    if dividend == -(2**31) and divisor == -1:
        return (2**31) - 1     
    return int(dividend / divisor)","def divide(dividend, divisor):",    if dividend == -(2**31) and divisor == -1:,"        return (2**31) - 1     
    return int(dividend / divisor)","def divide(dividend, divisor):
    return dividend / divisor


def get_price(price):
    return price * 100


def get_price_change(price, change):
    return price - change


def get_price_change"
"def reverse(x):
    result = 0
    negative = x < 0
    x = abs(x)
    while x != 0:
        result = result * 10 + x % 10
        x //= 10
    if negative:
        result = -result
    if result < -2 ** 31 or result > 2 ** 31 - 1:
        return 0
    return result","def reverse(x):
    result = 0
    negative = x < 0",    x = abs(x),"    while x != 0:
        result = result * 10 + x % 10
        x //= 10
    if negative:
        result = -result
    if result < -2 ** 31 or result > 2 ** 31 - 1:
        return 0
    return result","def reverse(x):
    result = 0
    negative = x < 0
    while negative:
        result = result * 10 + x % 10
        x = x // 10
    return result

def main():
    print(reverse(10))

if __name__ == '__"
"def romanToInt(s):
    result = 0
    previous_value = 0
    roman = {'I': 1,'V': 5,'X': 10,'L': 50,'C': 100,'D': 500,'M': 1000}
    for i in reversed(s):
        value = roman[i]
        if value < previous_value:
            result -= value
        else:
            result += value
        previous_value = value
    return result","def romanToInt(s):
    result = 0
    previous_value = 0
    roman = {'I': 1,'V': 5,'X': 10,'L': 50,'C': 100,'D': 500,'M': 1000}
    for i in reversed(s):
        value = roman[i]
        if value < previous_value:
            result -= value
        else:",            result += value,"        previous_value = value
    return result","def romanToInt(s):
    result = 0
    previous_value = 0
    roman = {'I': 1,'V': 5,'X': 10,'L': 50,'C': 100,'D': 500,'M': 1000}
    for i in reversed(s):
        value = roman[i]
        if value < previous_value:
            result -= value
        else:
            previous_value = value
    return result

def romanToInt2(s):
    result = 0
    previous_value = 0
    roman = {'I': 1,'V': 5,'X': 1"
"def longestConsecutive(nums):
    nums = set(nums)
    maximum = 0
    for num in nums:
        if (num - 1) not in nums:
            counter = 0
            while (num + counter) in nums:
                counter += 1
            maximum = max(maximum, counter)    
    return maximum","def longestConsecutive(nums):
    nums = set(nums)
    maximum = 0
    for num in nums:
        if (num - 1) not in nums:
            counter = 0",            while (num + counter) in nums:,"                counter += 1
            maximum = max(maximum, counter)    
    return maximum","def longestConsecutive(nums):
    nums = set(nums)
    maximum = 0
    for num in nums:
        if (num - 1) not in nums:
            counter = 0
            for i in range(len(nums)):
                if (num - i) in nums:
                    counter += 1
            if counter > maximum:
                maximum = counter
    return maximum

def longestConsecutive2(nums):
    nums"
"def wordPattern(pattern, s):
    word_map = {}
    s = s.split()
    if len(s) != len(pattern):
        return False
    for index, char in enumerate(pattern):
        if char not in word_map:
            if s[index] in word_map.values():
                return False
            word_map[char] = s[index]
        elif word_map[char] != s[index]:
            return False
    return True","def wordPattern(pattern, s):
    word_map = {}
    s = s.split()",    if len(s) != len(pattern):,"        return False
    for index, char in enumerate(pattern):
        if char not in word_map:
            if s[index] in word_map.values():
                return False
            word_map[char] = s[index]
        elif word_map[char] != s[index]:
            return False
    return True","def wordPattern(pattern, s):
    word_map = {}
    s = s.split()
    for i in range(len(s)):
        if s[i] in word_map:
            word_map[s[i]] += 1
        else:
            word_map[s[i]] = 1
    return"
"def longestPalindrome(s):
    map = {}
    counter = 0
    odd = False
    for char in s:
        if char not in map:
            map[char] = 1
        elif char in map:
            map[char] += 1
    for key, value in map.items():
        if value % 2 == 0:
            counter += value
        elif value % 2 != 0:
            counter += value - 1
            odd = True
    return counter + 1 if odd else counter","def longestPalindrome(s):
    map = {}
    counter = 0
    odd = False
    for char in s:
        if char not in map:
            map[char] = 1",        elif char in map:,"            map[char] += 1
    for key, value in map.items():
        if value % 2 == 0:
            counter += value
        elif value % 2 != 0:
            counter += value - 1
            odd = True
    return counter + 1 if odd else counter","def longestPalindrome(s):
    map = {}
    counter = 0
    odd = False
    for char in s:
        if char not in map:
            map[char] = 1
        else:
            map[char] += 1
        if map[char] > 1:
            odd = True
            counter += 1
    if odd:
        return counter
    else:
        return 0

def main():
   "
"def search(nums, target):
    left, right = 0, len(nums) - 1
    while left <= right:
        mid = (left + right) // 2
        if nums[mid] == target:
            return mid
        if nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1","def search(nums, target):
    left, right = 0, len(nums) - 1
    while left <= right:
        mid = (left + right) // 2",        if nums[mid] == target:,"            return mid
        if nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1","def search(nums, target):
    left, right = 0, len(nums) - 1
    while left <= right:
        mid = (left + right) // 2
        if nums[mid] == target:
            return mid
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1


def main():
    nums ="
"def missingNumber(nums):
    n = len(nums)
    result = n * (n + 1) // 2
    for num in nums:
        result -= num
    return result","def missingNumber(nums):
    n = len(nums)",    result = n * (n + 1) // 2,"    for num in nums:
        result -= num
    return result","def missingNumber(nums):
    n = len(nums)
    if n == 0:
        return 0
    else:
        return n - 1

def missingNumber2(nums):
    n = len(nums)
    if n == 0:
        return 0
    else:"
"def insertGreatestCommonDivisors(head):
    node = head
    while node.next:
        node.next = ListNode(gcd(node.val, node.next.val), node.next)
        node = node.next.next
    return head","def insertGreatestCommonDivisors(head):
    node = head",    while node.next:,"        node.next = ListNode(gcd(node.val, node.next.val), node.next)
        node = node.next.next
    return head","def insertGreatestCommonDivisors(head):
    node = head
    while node:
        if node.val > node.next.val:
            node.next = node.next.next
        else:
            node = node.next
    return head


def insertGreatestCommonSubtrees(head):"
"def mergeInBetween(list1, a, b, list2):
    left = right = list1
    for _ in range(a - 1):
        left = left.next
    for _ in range(b):
        right = right.next
    left.next = list2
    while list2:
        list2 = list2.next
    left.next = right.next
    left = right.next = None
    return list1","def mergeInBetween(list1, a, b, list2):
    left = right = list1
    for _ in range(a - 1):
        left = left.next
    for _ in range(b):
        right = right.next
    left.next = list2",    while list2:,"        list2 = list2.next
    left.next = right.next
    left = right.next = None
    return list1","def mergeInBetween(list1, a, b, list2):
    left = right = list1
    for _ in range(a - 1):
        left = left.next
    for _ in range(b):
        right = right.next
    left.next = list2
    right.next = list1
    return left, right


def mergeInBetween2(list1, a, b, list2):
    left = right = list1
    for _ in range(a - 1):
        left"
"def reverseList(head):
    prev, curr = None, head
    while curr:
        temp = curr.next
        curr.next = prev
        prev = curr
        curr = temp
    return prev","def reverseList(head):
    prev, curr = None, head
    while curr:",        temp = curr.next,"        curr.next = prev
        prev = curr
        curr = temp
    return prev","def reverseList(head):
    prev, curr = None, head
    while curr:
        curr = curr.next
        prev = curr
    return prev

def reverseList2(head):
    prev, curr = None, head
    while curr:
        curr = curr.next
        prev = curr
    return prev

def"
"def swapPairs(self, head):
    if not head or not head.next:
        return head
    head.val, head.next.val = head.next.val, head.val
    self.swapPairs(head.next.next)
    return head","def swapPairs(self, head):",    if not head or not head.next:,"        return head
    head.val, head.next.val = head.next.val, head.val
    self.swapPairs(head.next.next)
    return head","def swapPairs(self, head):
        """"""
        :type head: ListNode
        :rtype: ListNode
        """"""
        if not head:
            return head
        p = head
        q = head
        while p and q:
            if p.val < q.val:
                p ="
"def oddEvenList(head):
    if not head or not head.next:
        return head
    odd = head
    even = head.next
    node = even
    while even and even.next:
        odd.next = odd.next.next
        even.next = even.next.next
        odd = odd.next
        even = even.next
    odd.next = node
    return head","def oddEvenList(head):
    if not head or not head.next:
        return head
    odd = head
    even = head.next
    node = even
    while even and even.next:",        odd.next = odd.next.next,"        even.next = even.next.next
        odd = odd.next
        even = even.next
    odd.next = node
    return head","def oddEvenList(head):
    if not head or not head.next:
        return head
    odd = head
    even = head.next
    node = even
    while even and even.next:
        node = even.next
        even = even.next.next
    return odd.next

def oddEvenList2(head):
    if not head or not head.next:
        return head
    odd = head
    even = head"
"def mergeTwoLists(list1, list2):
    result = current = ListNode(0)
    while list1 and list2:
        if list1.val < list2.val:
            current.next = list1
            list1 = list1.next
        else:
            current.next = list2
            list2 = list2.next
        current = current.next
    if list1:
        current.next = list1
    elif list2:
        current.next = list2
    return result.next","def mergeTwoLists(list1, list2):
    result = current = ListNode(0)
    while list1 and list2:
        if list1.val < list2.val:
            current.next = list1
            list1 = list1.next
        else:
            current.next = list2
            list2 = list2.next",        current = current.next,"    if list1:
        current.next = list1
    elif list2:
        current.next = list2
    return result.next","def mergeTwoLists(list1, list2):
    result = current = ListNode(0)
    while list1 and list2:
        if list1.val < list2.val:
            current.next = list1
            list1 = list1.next
        else:
            current.next = list2
            list2 = list2.next
        current = current.next
    if list1:
        result.next = list1
    if list2:
        result.next = list2
    return result


def mergeTwoLists2(list1, list2):
    result ="
"def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)","def quick_sort(arr):
    if len(arr) <= 1:
        return arr",    pivot = arr[len(arr) // 2],"    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)","def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[0]
    i = 1
    for j in range(1, len(arr)):
        if arr[j] < pivot:
            arr[i], arr[j] = arr[j], arr[i"
"def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr","def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1",        arr[j + 1] = key,    return arr,"def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr


def insertion_sort_2(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1"
"def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        left = arr[:mid]
        right = arr[mid:]
        merge_sort(left)
        merge_sort(right)
        i = j = k = 0
        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                arr[k] = left[i]
                i += 1
            else:
                arr[k] = right[j]
                j += 1
            k += 1
        while i < len(left):
            arr[k] = left[i]
            i += 1
            k += 1
        while j < len(right):
            arr[k] = right[j]
            j += 1
            k += 1
    return arr","def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        left = arr[:mid]
        right = arr[mid:]
        merge_sort(left)
        merge_sort(right)
        i = j = k = 0
        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                arr[k] = left[i]
                i += 1
            else:
                arr[k] = right[j]
                j += 1
            k += 1
        while i < len(left):
            arr[k] = left[i]
            i += 1",            k += 1,"        while j < len(right):
            arr[k] = right[j]
            j += 1
            k += 1
    return arr","def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        left = arr[:mid]
        right = arr[mid:]
        merge_sort(left)
        merge_sort(right)
        i = j = k = 0
        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                arr[k] = left[i]
                i += 1
            else:
                arr[k] = right[j]
                j += 1
            k += 1
        while i < len(left):
            arr[k] = left[i]
            i += 1
            k += 1
        while j < len(right):
            arr[k] = right[j]
            j += 1
            k += 1
    return arr


def merge_sort_2(arr):
    if len"
"def selection_sort(arr):
    n = len(arr)
    for i in range(n):
        min_index = i
        for j in range(i + 1, n):
            if arr[j] < arr[min_idx]:
                min_index = j
        arr[i], arr[min_index] = arr[min_index], arr[i]
    return arr","def selection_sort(arr):
    n = len(arr)
    for i in range(n):
        min_index = i
        for j in range(i + 1, n):
            if arr[j] < arr[min_idx]:",                min_index = j,"        arr[i], arr[min_index] = arr[min_index], arr[i]
    return arr","def selection_sort(arr):
    n = len(arr)
    for i in range(n):
        min_index = i
        for j in range(i + 1, n):
            if arr[j] < arr[min_idx]:
                min_index = j
        arr[i], arr[min_index] = arr[min_index], arr[i]


def selection_sort_2(arr):
    n = len(arr)
    for i in"
"def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr","def bubble_sort(arr):
    n = len(arr)
    for i in range(n):","        for j in range(0, n - i - 1):","            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr","def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(i+1, n):
            if arr[j] > arr[i]:
                arr[j], arr[i] = arr[i], arr[j]

def quick_sort(arr):"
